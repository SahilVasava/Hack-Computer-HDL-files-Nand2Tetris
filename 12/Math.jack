// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int w, i;
        let w = 1;
        let i = 0;
        let twoToThe = Array.new(16);        

        while(i < 15) {
            let twoToThe[i] = w;
            let w = w + w;
            let i = i + 1;
        }
        return;
    }


    /** Returns true if the i-th bit of x is 1, false otherwise*/
    function boolean bit(int x, int i) {
        return (~((x & twoToThe[i]) = 0));
    }
        

    /** Returns the absolute value of x. */
    function int abs(int x) {
        return 1;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, filter, w, sthBit, index;
        let sum = 0;
        let index = 0;
        let shiftedX = x;
        let filter = 1;
        let w = 1;
        let sthBit = ~((y & -1) = 0);
        do Output.printString("x: ");
        do Output.printInt(x);
        do Output.printString(" y: ");
        do Output.printInt(y);
        do Output.println();

        do Output.printString("negative: ");
        do Output.printInt(Math.bit(y,15));
        do Output.println();
        if(Math.bit(y,15)) {
            do Output.printString("int y is negative");
            do Output.println();
        }
        
        while((w < y)) {
            do Output.printString("yaf: ");
            do Output.printInt((y & filter));
            do Output.printString(" ");
            
            if(Math.bit(y, index)) {
                let sum = sum + shiftedX;
                do Output.printString(" sum: ");
                do Output.printInt(sum);
            }
            let shiftedX = shiftedX + shiftedX;
            let filter = filter + filter;
            let w = w + w;
            let index = index + index;
            if (w = 512) {
                let sthBit = 0;
            }
            do Output.printString(" sh: ");
            do Output.printInt(shiftedX);
            do Output.printString(" f: ");
            do Output.printInt(filter);
            do Output.printString(" w: ");
            do Output.printInt(w);
            do Output.println();
        }
        return sum;
        /* i = 0
        /* y = 8
        /* temp = 1
            while temp <= y or temp <= 16 + y
                temp += temp

            1 0 
            1 0
            1 0
          1 0 0
          
        */

    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        return 1;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        return 1;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        return 1;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        return 1;
    }
}
